# Copyright 2023 Ross J. Duff MSc 
# The copyright holder licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
[project]
authors = [{name = "Ross J. Duff MSc", email = "rjdbcm@github.com"}]
dynamic = ["version"]
license = {file = "LICENSE.txt"}
readme  = "README.rst"

[project.optional_dependencies] # also meson test suite names
# Default OZI test setup
dev  = ["[dist,docs,lint,test]"]
## Packaging Setup
dist = ["pyc_wheel", "python-semantic-release", "sigstore"]
## Documentation Setup
docs = ["doc8", "pydocstyle[toml]", "Pygments", "pyparsing", "sphinx",
        "sphinx-design", "sphinxawesome-codelinter", "sphinxawesome-theme ~= 5.0.0b2"]
## Linting and Formatting Setup
lint = ["bandit[toml]", "black", "flake8", "Flake8-pyproject", "isort", "pylint", "pyright",
        "restructuredtext-lint"]
## Testing Setup
test = ["coverage[toml]", "hypothesis[all]", "pytest", "pytest-asyncio", "pytest-cov", 
        "pytest-tcpclient", "pytest-randomly", "pytest-xdist"]

[tool.mesonpep517.metadata]
requires-python = "~=3.9"
summary         = "Packaged with OZI."
classifiers     = [
    "Development Status :: 2 - Pre-Alpha",
    "Natural Language :: English",
    "Intended Audience :: Developers",
    "Environment :: MacOS X",
    "Environment :: Win32 (MS Windows)",
    "Environment :: X11 Applications",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Interpreters",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[build-system]
requires      = ["mesonpep517","ninja","setuptools>=64","setuptools_scm[toml]>=6.2","tomli"]
build-backend = "mesonpep517.buildapi"

[tool.bandit]
exclude_dirs = ["venv", "build-env-*"]
verbose = true
format = "txt"

[tool.black]
line-length = 93

[tool.coverage.report]
exclude_lines = [
    "#\\s*(pragma|PRAGMA)[:\\s]?\\s*(no|NO)\\s*(cover|COVER)",
    "#\\s*(pragma|PRAGMA)[:\\s]?\\s*(defer|DEFER)\\s*(to|TO)\\s*[a-zA-Z0-9_]*",
    "def __repr__",
    "def __wrapper", # functools.wraps decorated functions
    "(\\.\\.\\.)",
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    "if __name__ == .__main__.:",
    ]
fail_under    = 100.0
show_missing  = true
skip_covered  = true
skip_empty    = true

[tool.coverage.run]
branch         = true
relative_files = true

[tool.doc8]
ignore = ["D000", "D002"]

[tool.flake8]
max-line-length = 93
extend-exclude = ["build-env-*", "venv", "build*"]

[tool.isort]
line_length = 93
profile = "black"
verbose = true

[tool.mesonpep517.dynamic]
version = {attr = "_scm_version.__version__"}

[tool.pydocstyle]
match = "\\*\\.py"

[tool.pylint.MASTER]
ignore = "_scm_version.py"

[tool.pyright]
reportMissingTypeStubs = false

[tool.pytest.ini_options] #[tool.pytest] # This will be used by pytest in the future
filterwarnings      = [
"error",
"ignore:The --rsyncdir command line argument and rsyncdirs config variable are deprecated.:DeprecationWarning",
]
asyncio_mode        = "auto"
log_cli             = true
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format      = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_level       = "INFO"

[tool.semantic_release]
# hvcs_api_domain          = ""
# hvcs_domain              = ""
branch                   = "main"
build_command            = """
                        git stash && \
                        python -m build && \
                        python -m pyc_wheel dist/*.whl && \
                        sigstore sign dist/*.whl && \
                        git stash pop"""
changelog_file           = "CHANGELOG.md"
changelog_placeholder    = "<!--next-version-placeholder-->"
commit_parser            = "semantic_release.history.emoji_parser"
commit_version_number    = true
dist_glob_patterns       = "*.dist-info,*.whl"
dist_path                = "dist/"
hvcs                     = "github"
include_additional_files = """
                        dist/*.sig,\
                        dist/*.crt,\
                        dist/*.sigstore,\
                        build-dist-checkpoint/meson-dist/*.tar.gz,\
                        build-dist-checkpoint/meson-dist/*.sha256sum,\
                        build-dist-checkpoint/meson-dist/*.sig,\
                        build-dist-checkpoint/meson-dist/*.crt,\
                        build-dist-checkpoint/meson-dist/*.sigstore"""
major_on_zero            = false
patch_without_tag        = false
prerelease_tag           = "beta"
pre_commit_command       = """
                        meson setup build-dist-checkpoint --reconfigure -Ddev=enabled && \
                        meson test -C build-dist-checkpoint --setup=test --setup=lint"""
remove_dist              = false
repository               = "testpypi"
tag_format               = "{version}"
upload_to_release        = true
upload_to_repository     = false
version_source           = "tag_only"
version_variable         = "_scm_version.py:__version__"

[tool.setuptools_scm]
write_to = "_scm_version.py"
# meson writes during configuration so that meson dist can have a valid version.
fallback_version = "@MESON_DIST_FALLBACK_VERSION@"
# meson writes during configuration so that github tarballs can have a valid version.
parentdir_prefix_version = "@PROJECT_NAME@-"
tag_regex = "^(?P<prefix>v)?(?P<version>[^\\+]+)(?P<suffix>.*)?$"

[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist = True
envlist = py{39,310-type,311}-toml

[gh]
python =
     3.11 = py311
     3.10 = py310, toml, type
     3.9 = py39, toml

[testenv]
package = wheel
deps =
     meson >= 1.1.0
     setuptools_scm[toml]>=6.2
     toml: tomli >= 2.0.0
commands =
     meson setup build-{envname} -Ddev=enabled --reconfigure
     meson test -C build-{envname} {posargs}
"""